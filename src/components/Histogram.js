import React, { Component } from 'react';
import * as d3 from "d3";

class Histogram extends Component {
  componentDidMount() {
    console.log(this.props);
    this.createHistogram();
  }
  componentDidUpdate() {
    this.createHistogram();
  }
  getLoyaltyData = (membersArray) => {
    return (
      membersArray
        .map(m => m.votes_with_party_pct)
        .filter(m => m !== undefined && m>0 && m<=100)
    );
  }
  getFillColor = (party) => {
    switch(party) {
      case 'Total':
        return 'grey';
      case 'Democrats':
        return 'blue';
      case 'Republicans':
        return 'red';
      case 'Independents':
        return 'green';
      default:
        break;
    }
  }

  updateRectangles = (rects, x, y, graphHeight, fillColor) => {
    const t = d3.transition().duration(1000);
    return rects.attr("x", d => x(d.x0)+1)
      .attr("width", d => x(d.x1) - x(d.x0) === 0 ? (0) : (x(d.x1) - x(d.x0)-1))
      .attr("y", graphHeight)
      .attr("height", 0)
      .style("fill", fillColor)
      .transition(t)
        .attr('y', d => y(d.length))
        .attr('height', d => graphHeight - y(d.length))
  }
  createGraph = () => {

  }

  createHistogram = () => {
    const total = this.getLoyaltyData(this.props.totalMembers.members);
    const data = this.getLoyaltyData(this.props.partyMembers.members);
    const fillColor = this.getFillColor(this.props.partyMembers.name);

    // node in svg element acts as a reference to the actual DOM node generated by React
    const node = this.node;

    // delete previous graphs from toggling between parties (except for total)
    for(let i = 1; i < node.children.length; i++) {
      node.children[i].remove();
    }

    // margins and dimensions
    const margin = {top:20, right:20, bottom: 100, left: 100};
    const graphWidth = 500 - margin.left - margin.right;
    const graphHeight = 400 - margin.top - margin.bottom;

    //create a group for bars, add width/height attributes
    const graph = d3.select(node).append('g')
      .attr('width', graphWidth)
      .attr('height', graphHeight)
      .attr('transform', `translate(${margin.left}, ${margin.top})`)

    const xAxisGroup = graph.append('g')
      .attr('transform', `translate(0, ${graphHeight})`);
    const yAxisGroup = graph.append('g');

    const x = d3.scaleLinear().range([0, graphWidth]);
    const y = d3.scaleLinear().range([graphHeight, 0]);

    const xAxis = d3.axisBottom(x);
    const yAxis = d3.axisLeft(y);

    const count = 20;

    x.domain(d3.extent(total))
      .nice(count);

    const histogram = d3.histogram()
      .domain(x.domain())
      .thresholds(x.ticks(count));

    const totalBins = histogram(total);
    const bins = histogram(data);

    y.domain([0, d3.max(totalBins.map(bin => bin.length))]);

    const rects = graph.selectAll('rect')
      .data(bins);

    rects.exit().remove();

    this.updateRectangles(rects, x, y, graphHeight, fillColor);
    this.updateRectangles(rects.enter().append('rect'), x, y, graphHeight, fillColor);

    xAxis.ticks(5)
      .tickFormat(d => d + '%')

    xAxisGroup.call(xAxis);
    yAxisGroup.call(yAxis);
  }
  render() {
    return <svg
      ref={node => this.node = node}
      width='500'
      height='400'>
      </svg>
  }
}

export default Histogram;
